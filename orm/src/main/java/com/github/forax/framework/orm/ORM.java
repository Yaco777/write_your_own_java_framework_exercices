package com.github.forax.framework.orm;

import javax.sql.DataSource;

import java.beans.BeanInfo;
import java.beans.FeatureDescriptor;
import java.beans.PropertyDescriptor;
import java.io.Serial;
import java.lang.reflect.Constructor;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Proxy;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public final class ORM {
  private ORM() {
    throw new AssertionError();
  }



  @FunctionalInterface
  public interface TransactionBlock {
    void run() throws SQLException;
  }

  private static final Map<Class<?>, String> TYPE_MAPPING = Map.of(
      int.class, "INTEGER",
      Integer.class, "INTEGER",
      long.class, "BIGINT",
      Long.class, "BIGINT",
      String.class, "VARCHAR(255)"
  );

  private static Class<?> findBeanTypeFromRepository(Class<?> repositoryType) {
    var repositorySupertype = Arrays.stream(repositoryType.getGenericInterfaces())
        .flatMap(superInterface -> {
          if (superInterface instanceof ParameterizedType parameterizedType
              && parameterizedType.getRawType() == Repository.class) {
            return Stream.of(parameterizedType);
          }
          return null;
        })
        .findFirst()
        .orElseThrow(() -> new IllegalArgumentException("invalid repository interface " + repositoryType.getName()));
    var typeArgument = repositorySupertype.getActualTypeArguments()[0];
    if (typeArgument instanceof Class<?> beanType) {
      return beanType;
    }
    throw new IllegalArgumentException("invalid type argument " + typeArgument + " for repository interface " + repositoryType.getName());
  }

  private static class UncheckedSQLException extends RuntimeException {
    @Serial
    private static final long serialVersionUID = 42L;

    private UncheckedSQLException(SQLException cause) {
      super(cause);
    }

    @Override
    public SQLException getCause() {
      return (SQLException) super.getCause();
    }
  }


  // --- do not change the code above


  private static final ThreadLocal<Connection> CONNECTION_THREAD_LOCAL = new ThreadLocal<>();


  public static void transaction(DataSource dataSource, TransactionBlock block) throws SQLException {

    try(var connection = dataSource.getConnection()) {

      CONNECTION_THREAD_LOCAL.set(connection);
      try {
        connection.setAutoCommit(false);
        block.run();
        connection.commit();

      } catch (SQLException e) {
        connection.rollback();
        throw e;
      }
      finally {
        CONNECTION_THREAD_LOCAL.remove();
      }
    }
  }

  public static Connection currentConnection() {
    var connection = CONNECTION_THREAD_LOCAL.get();
    if(connection == null) {
      throw new IllegalStateException("No connection available");
    }
    return connection;

  }

   static String findTableName(Class<?> beanClass) {

    var table = beanClass.getAnnotation(Table.class);
    //the getSimpleName will return the name of the class without the package
    var name =  table == null ? beanClass.getSimpleName() : table.value();
    return name.toUpperCase(Locale.ROOT);

  }

  private static boolean isAutoGenerated(PropertyDescriptor property) {
    var getter = getGetterMethod(property);
    return getter.isAnnotationPresent(GeneratedValue.class);
  }

  private static boolean isPrimaryKey(PropertyDescriptor property) {
    var getter = getGetterMethod(property);
    return getter.isAnnotationPresent(Id.class);
  }

  private static Method getGetterMethod(PropertyDescriptor property) {
    return property.getReadMethod();
  }

  static String findColumnName(PropertyDescriptor property) {

    var getter = property.getReadMethod();
    if(getter == null) {
      throw new IllegalStateException("No guetter for property "+property.getName());
    }
    var column = getter.getAnnotation(Column.class);
    var name =  column == null ? property.getName() : column.value();
    return name.toUpperCase(Locale.ROOT);
  }

  public static void createTable(Class<?> furnitureClass) throws SQLException {
    Objects.requireNonNull(furnitureClass);
    var tableName = findTableName(furnitureClass);
    var query = "CREATE TABLE "+tableName+" "+Arrays.stream(Utils.beanInfo(furnitureClass).getPropertyDescriptors())
            .filter(property -> !property.getName().equals("class"))
            .map(ORM::apply)
            .collect(Collectors.joining(",\n","(\n",");\n"));


    var connection = ORM.currentConnection();


    try(var statement = connection.createStatement()) {
      statement.executeUpdate(query);
    }

  }
  private static String apply(PropertyDescriptor property) {


    var column = ORM.findColumnName(property);
    var type = property.getPropertyType();
    var typeName = TYPE_MAPPING.get(type);
    if (typeName == null) {
      throw new IllegalStateException("Unknown type " + type.getName());
    }
    var notNull = type.isPrimitive() ? " NOT NULL" : "";
    var autoIncrement = isAutoGenerated(property) ? " AUTO_INCREMENT " : "";
    var primaryKey = isPrimaryKey(property) ? ", PRIMARY KEY ("+column+")" : "";

    return column + " " + typeName + notNull + autoIncrement+primaryKey;

  }

  public static <T extends Repository<?,?>> T createRepository(Class<T> repositoryClass) {
    Objects.requireNonNull(repositoryClass);
    var beanType = findBeanTypeFromRepository(repositoryClass);
    var objectProxy = Proxy.newProxyInstance(repositoryClass.getClassLoader(), new Class<?>[] {repositoryClass},
            (Object proxy, Method method, Object[] args) -> {
              try {
                return switch(method.getName()) {
                  case "findAll" -> findAll(beanType);
                  case "equals", "hashCode", "toString" -> throw new UnsupportedOperationException("method "+method+" not supported");
                  case "save" -> save(ORM.currentConnection(), findTableName(beanType), Utils.beanInfo(beanType), args[0]);
                  default -> throw new IllegalStateException("method "+method+" not supported");
                };
              } catch (SQLException e) {
                throw new UncheckedSQLException(e);
              }

            });

    return repositoryClass.cast(objectProxy);

  }

  private static List<?> findAll(Class<?> beanType) throws SQLException {
    var connection = currentConnection();
    var constructor = Utils.defaultConstructor(beanType); // constructor without any parameter
    var tableName = findTableName(beanType);
    var beanInfo = Utils.beanInfo(beanType);
    var properties = beanInfo.getPropertyDescriptors();
    String sqlQuery = "SELECT * FROM "+tableName;
    try(var statement = connection.prepareStatement(sqlQuery)) {
      var list = new ArrayList<>();
      try(var resultSet = statement.executeQuery()) {
        while(resultSet.next()) {

          var instance = Utils.newInstance(constructor);
          var index = 1; // h2 index start at 1 and not 0
          for (var property : properties) {
            if(property.getName().equals("class")) {
              continue;
            }
            var value = resultSet.getObject(index++);
            var setter = property.getWriteMethod();
            Utils.invokeMethod(instance, setter,value);

          }
          list.add(instance);
        }
        return list;
      }
    }

    }

    static Object toEntityClass(ResultSet resultSet,BeanInfo beanInfo,Constructor<?> constructor)  throws SQLException {


      var instance = Utils.newInstance(constructor);
      for(var property : beanInfo.getPropertyDescriptors()) {
        //we remove the "class"
        if(property.getName().equals("class")) {
          continue;
        }
  
        //We call the setter with the correct value from the resultSet
        var setterValue = resultSet.getObject(property.getName());
        var setter = property.getWriteMethod();
        Utils.invokeMethod(instance,setter,setterValue);

      }

      return instance;

    }

   

    static List<Object> findAll(Connection connection,String sqlQuery,BeanInfo beanInfo,Constructor<?> constructor) throws SQLException{

      var list = new ArrayList<>();
      try(var statement = connection.prepareStatement(sqlQuery)) {
       
        try(var resultSet = statement.executeQuery()) {
          while(resultSet.next()) {
            var instance = toEntityClass(resultSet,beanInfo,constructor);
            list.add(instance);
          }
          return list;
        }
      } 
     
    
  }

  public static String createSaveQuery(String tableName,BeanInfo beanInfo) {
    var insertInto = "INSERT INTO "+tableName+" ";
    var columns = Arrays.stream(beanInfo.getPropertyDescriptors())
            .map(FeatureDescriptor::getName)
            .filter(name -> !name.equals("class"))
            .collect(Collectors.joining(", ","(",")"));

    //we need to add a (?) in the values for each columns
    var values = Arrays.stream(beanInfo.getPropertyDescriptors())
            .filter(property -> !property.getName().equals("class"))
            .map(property -> "?")
            .collect(Collectors.joining(", ","(",")"));
    return insertInto + columns + " VALUES " + values+ ";";

    
  }

  public static Object save(Connection connection,String tableName,BeanInfo beanInfo,Object bean) throws SQLException {

    var query = createSaveQuery(tableName,beanInfo);
    try(var statement = connection.prepareStatement(query)) {
      var columnIndex = 1; //we start at 1 for the column index
      for(var property : beanInfo.getPropertyDescriptors()) {

        if(property.getName().equals("class")) {
          continue;
        }
        var value = Utils.invokeMethod(bean,getGetterMethod(property));
        statement.setObject(columnIndex, value);
        columnIndex++;
      }
      statement.executeUpdate();
    }

    return bean;



  }



}


